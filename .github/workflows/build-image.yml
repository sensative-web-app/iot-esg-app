# Build a container image and run Cypress tests.

name: Build, publish and test container image

on:
  push:
    branches: ['main', 'staging', 'ci', 'protected', 'trunk/*']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  run-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          cache: npm
          node-version: 20.10

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run linter
        run: npm run lint

      - name: Run unit tests
        run: npm run test

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image-url: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\
                  @${{ steps.push-to-ghcr.outputs.digest }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Buildah Action
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.IMAGE_NAME }}
          tags: ${{ contains(github.ref_name, '/') || github.ref_name }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
          containerfiles: |
            ./Dockerfile
          extra-args: |
            --ulimit nofile=8192

      - name: Log in to the GitHub Container registry
        uses: redhat-actions/podman-login@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to GitHub container registry
        id: push-to-ghcr
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: ${{ env.REGISTRY }}

  run-cypress-tests:
    runs-on: ubuntu-latest

    needs: build-and-push-image

    services:
      app:
        image: ${{ needs.build-and-push-image.outputs.image-url }}

        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.github_token }}
        ports:
          - 3000:3000
        env:
          APP_URL: http://localhost:3000
          NEXT_PUBLIC_YGGIO_API_URL: https://staging.yggio.net/api
          NEXT_PUBLIC_YGGIO_MQTT_URL: "wss://mqtt.staging.yggio.net:15676/ws"
          NEXT_PUBLIC_SET_ID: "6614153edba0fc9f32a7232e"
          SECRET_COOKIE_PASSWORD: "${{ secrets.SECRET_COOKIE_PASSWORD }}"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Disable non-test dependencies
        run: |
          mv package.json package.json.bak
          cat <<EOF >package.json
          {
            "name": "e2e-tests",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "typescript": "^5",
              "cypress": "^13.6.6",
              "cypress-terminal-report": "^6.0.1"
            }
          }
          EOF

      - name: Run Cypress E2E tests
        env:
          cypress_localhost_url: http://localhost:3000/
          #cypress_username: LNU_hyresgast_1
          #cypress_password: "${{ secrets.CYPRESS_PASSWORD }}"
        uses: cypress-io/github-action@v6

      - name: Get app container logs
        if: '!cancelled()'
        run: docker logs "${{ job.services.app.id }}"

      - name: Archive test artifacts
        if: '!cancelled()'
        uses: actions/upload-artifact@v4
        with:
          name: screenshots
          path: |
            cypress/screenshots
            cypress/videos
          if-no-files-found: ignore
